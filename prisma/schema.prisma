datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Note          Note[]
  Tag           Tag[]
  role          String          @default("user") // 默认角色为user
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// 业务表
// 标签
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  icon      String?  @db.Text
  iconDark  String?  @db.Text
  // 关联用户id
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]

  User User @relation(fields: [userId], references: [id])
}

// 笔记
model Note {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  content     String   @db.Text
  cover       String?
  author      String?
  published   Boolean  @default(false)
  // 关联用户id
  userId      String
  tagIds      String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tag       Tag      @relation(fields: [tagIds], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}
